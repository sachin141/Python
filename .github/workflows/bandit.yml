name: Bandit Code Scan

on:
  pull_request:
    branches:
      - master

jobs:
  scan:
    name: Scan Python Code with Bandit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit
        id: bandit
        run: bandit -r . -f json -o bandit.json || echo "::set-output name=bandit_failed::true"
        #run: bandit -r . -f json || echo "::set-output name=bandit_failed::true"

      - name: Show Bandit Results
        if: steps.bandit.outputs.bandit_failed == 'true'
        run: cat bandit.json


      - name: Show Bandit Results
        if: steps.bandit.outputs.bandit_failed == 'true'
        run: |
          cat bandit.json | jq '.results[] | select(.issue_severity == "LOW")' > low_severity_issues.json
          if [ -s low_severity_issues.json ]; then
            echo "Blocking pull request due to low severity issues found by Bandit:"
            cat low_severity_issues.json
            echo "::set-output name=block_pr::true"
            exit 1
          fi

      - name: Block Pull Request
        if: steps.bandit.outputs.block_pr == 'true'
        run: |
          GITHUB_TOKEN=$GITHUB_TOKEN
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          gh api -X PUT "/repos/${{ github.repository }}/issues/${PR_NUMBER}/lock" -F lock_reason="Bandit scan detected low severity issues."
          gh pr comment $PR_NUMBER --body "Bandit scan detected low severity issues. Pull request blocked."





#      - name: Check Bandit Results
##        if: steps.bandit.outputs.bandit_failed == 'true'
#        id: check_bandit
#        run: echo "::set-output name=block_pull_request::$(jq '.results | map(select(.issue_severity = 4 )) | length > 0' bandit.json)"

#      - name: Display Bandit Findings
#        if: steps.check_bandit.outputs.block_pull_request == 'true'
#        uses: actions/github-script@v4
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const issueComment = `
#            **Bandit Security Scan Findings:**
#            \`\`\`
#            $(cat bandit.json)
##            \`\`\`
#            `;
#            github.issues.createComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              issue_number: context.issue.number,
#              body: issueComment
#            })

#

#      - name: Block or Merge Pull Request
#        if: steps.check_bandit.outputs.block_pull_request == 'true'
#        uses: actions/github-script@v4
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            github.issues.createComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              issue_number: context.issue.number,
#              body: 'Block'
#            })
#            github.pulls.update({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: context.issue.number,
#              state: 'closed'
#            })

#      - name: Auto-Merge Pull Request
#        if: steps.check_bandit.outputs.block_pull_request != 'true'
#        uses: actions/github-script@v4
#        with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            github.issues.createComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              issue_number: context.issue.number,
#              body: 'Successful........'
#            })
#            github.pulls.merge({
#              owner: context.repo.owner,
#             repo: context.repo.repo,
#              pull_number: context.issue.number
#            })